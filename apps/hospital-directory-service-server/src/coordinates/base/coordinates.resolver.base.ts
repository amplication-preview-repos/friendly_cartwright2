/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Coordinates } from "./Coordinates";
import { CoordinatesCountArgs } from "./CoordinatesCountArgs";
import { CoordinatesFindManyArgs } from "./CoordinatesFindManyArgs";
import { CoordinatesFindUniqueArgs } from "./CoordinatesFindUniqueArgs";
import { CreateCoordinatesArgs } from "./CreateCoordinatesArgs";
import { UpdateCoordinatesArgs } from "./UpdateCoordinatesArgs";
import { DeleteCoordinatesArgs } from "./DeleteCoordinatesArgs";
import { CoordinatesService } from "../coordinates.service";
@graphql.Resolver(() => Coordinates)
export class CoordinatesResolverBase {
  constructor(protected readonly service: CoordinatesService) {}

  async _coordinatesItemsMeta(
    @graphql.Args() args: CoordinatesCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Coordinates])
  async coordinatesItems(
    @graphql.Args() args: CoordinatesFindManyArgs
  ): Promise<Coordinates[]> {
    return this.service.coordinatesItems(args);
  }

  @graphql.Query(() => Coordinates, { nullable: true })
  async coordinates(
    @graphql.Args() args: CoordinatesFindUniqueArgs
  ): Promise<Coordinates | null> {
    const result = await this.service.coordinates(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Coordinates)
  async createCoordinates(
    @graphql.Args() args: CreateCoordinatesArgs
  ): Promise<Coordinates> {
    return await this.service.createCoordinates({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Coordinates)
  async updateCoordinates(
    @graphql.Args() args: UpdateCoordinatesArgs
  ): Promise<Coordinates | null> {
    try {
      return await this.service.updateCoordinates({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Coordinates)
  async deleteCoordinates(
    @graphql.Args() args: DeleteCoordinatesArgs
  ): Promise<Coordinates | null> {
    try {
      return await this.service.deleteCoordinates(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}

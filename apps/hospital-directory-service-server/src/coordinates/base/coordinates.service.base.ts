/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Coordinates as PrismaCoordinates } from "@prisma/client";

export class CoordinatesServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CoordinatesCountArgs, "select">
  ): Promise<number> {
    return this.prisma.coordinates.count(args);
  }

  async coordinatesItems(
    args: Prisma.CoordinatesFindManyArgs
  ): Promise<PrismaCoordinates[]> {
    return this.prisma.coordinates.findMany(args);
  }
  async coordinates(
    args: Prisma.CoordinatesFindUniqueArgs
  ): Promise<PrismaCoordinates | null> {
    return this.prisma.coordinates.findUnique(args);
  }
  async createCoordinates(
    args: Prisma.CoordinatesCreateArgs
  ): Promise<PrismaCoordinates> {
    return this.prisma.coordinates.create(args);
  }
  async updateCoordinates(
    args: Prisma.CoordinatesUpdateArgs
  ): Promise<PrismaCoordinates> {
    return this.prisma.coordinates.update(args);
  }
  async deleteCoordinates(
    args: Prisma.CoordinatesDeleteArgs
  ): Promise<PrismaCoordinates> {
    return this.prisma.coordinates.delete(args);
  }
}

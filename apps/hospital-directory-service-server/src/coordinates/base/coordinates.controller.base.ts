/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CoordinatesService } from "../coordinates.service";
import { CoordinatesCreateInput } from "./CoordinatesCreateInput";
import { Coordinates } from "./Coordinates";
import { CoordinatesFindManyArgs } from "./CoordinatesFindManyArgs";
import { CoordinatesWhereUniqueInput } from "./CoordinatesWhereUniqueInput";
import { CoordinatesUpdateInput } from "./CoordinatesUpdateInput";

export class CoordinatesControllerBase {
  constructor(protected readonly service: CoordinatesService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Coordinates })
  async createCoordinates(
    @common.Body() data: CoordinatesCreateInput
  ): Promise<Coordinates> {
    return await this.service.createCoordinates({
      data: data,
      select: {
        createdAt: true,
        id: true,
        latitude: true,
        longitude: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Coordinates] })
  @ApiNestedQuery(CoordinatesFindManyArgs)
  async coordinatesItems(
    @common.Req() request: Request
  ): Promise<Coordinates[]> {
    const args = plainToClass(CoordinatesFindManyArgs, request.query);
    return this.service.coordinatesItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        latitude: true,
        longitude: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Coordinates })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async coordinates(
    @common.Param() params: CoordinatesWhereUniqueInput
  ): Promise<Coordinates | null> {
    const result = await this.service.coordinates({
      where: params,
      select: {
        createdAt: true,
        id: true,
        latitude: true,
        longitude: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Coordinates })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCoordinates(
    @common.Param() params: CoordinatesWhereUniqueInput,
    @common.Body() data: CoordinatesUpdateInput
  ): Promise<Coordinates | null> {
    try {
      return await this.service.updateCoordinates({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          latitude: true,
          longitude: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Coordinates })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCoordinates(
    @common.Param() params: CoordinatesWhereUniqueInput
  ): Promise<Coordinates | null> {
    try {
      return await this.service.deleteCoordinates({
        where: params,
        select: {
          createdAt: true,
          id: true,
          latitude: true,
          longitude: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
